package com.jitaida.tiancai.leetcode.easy;

import java.util.HashMap;
import java.util.Map;

public class TwoSum {
    /**
     * 给定一个整数数组 nums?和一个目标值 target，请你在该数组中找出和为目标值的那?两个?整数，并返回他们的数组下标。
     *
     * 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。
     *
     * ?
     *
     * 示例:
     *
     * 给定 nums = [2, 7, 11, 15], target = 9
     *
     * 因为 nums[0] + nums[1] = 2 + 7 = 9
     * 所以返回 [0, 1]
     *
     * 来源：力扣（LeetCode）
     * 链接：https://leetcode-cn.com/problems/two-sum
     * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
     */

    public static int[] twoSum(int[] nums, int target) {
        int startPtr;
        int endPtr;
        for (startPtr=0; startPtr < nums.length; startPtr++){

            for (endPtr=startPtr+1; endPtr<nums.length; endPtr++){

                if (nums[startPtr] + nums[endPtr] == target){
                    return new int[]{startPtr, endPtr};
                }
            }
        }

        return new int[0];
    }

    public static int[] twoSum2(int[] nums, int target) {
        int startPtr;
        Map<Integer, Integer> passedValue = new HashMap<Integer, Integer>();
        for (startPtr=0; startPtr < nums.length; startPtr++){
            if (passedValue.containsKey(target-nums[startPtr])){
                return new int[]{passedValue.get(target-nums[startPtr]), startPtr};
            }

            passedValue.put(nums[startPtr], startPtr);
        }

        return new int[0];
    }

    public static void main(String[] args){
        int[] x = TwoSum.twoSum(new int[]{-3,4,3,90}, 0);

        for (int i : x){
            System.out.println(i);
        }
    }
}
