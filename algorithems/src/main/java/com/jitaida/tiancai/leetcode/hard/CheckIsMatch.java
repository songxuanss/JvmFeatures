package com.jitaida.tiancai.leetcode.hard;

/**
 * 给定一个字符串?(s) 和一个字符模式?(p) ，实现一个支持?'?'?和?'*'?的通配符匹配。
 *
 * '?' 可以匹配任何单个字符。
 * '*' 可以匹配任意字符串（包括空字符串）。
 * 两个字符串完全匹配才算匹配成功。
 *
 * 说明:
 *
 * s?可能为空，且只包含从?a-z?的小写字母。
 * p?可能为空，且只包含从?a-z?的小写字母，以及字符???和?*。
 * 示例?1:
 *
 * 输入:
 * s = "aa"
 * p = "a"
 * 输出: false
 * 解释: "a" 无法匹配 "aa" 整个字符串。
 * 示例?2:
 *
 * 输入:
 * s = "aa"
 * p = "*"
 * 输出: true
 * 解释:?'*' 可以匹配任意字符串。
 * 示例?3:
 *
 * 输入:
 * s = "cb"
 * p = "?a"
 * 输出: false
 * 解释:?'?' 可以匹配 'c', 但第二个 'a' 无法匹配 'b'。
 * 示例?4:
 *
 * 输入:
 * s = "adceb"
 * p = "*a*b"
 * 输出: true
 * 解释:?第一个 '*' 可以匹配空字符串, 第二个 '*' 可以匹配字符串 "dce".
 * 示例?5:
 *
 * 输入:
 * s = "acdcb"
 * p = "a*c?b"
 * 输出: false
 *
 */
public class CheckIsMatch {
    public boolean isMatch(String s, String p){
        int pLen = p.length();
        int sLen = s.length();
        boolean[][] dp = new boolean[pLen+1][sLen+1];

        dp[0][0] = true;

        for (int i = 1; i<=pLen; i++){
            if (p.charAt(i-1) != '*'){
                break;
            }

            dp[i][0] = true;
        }

        for (int i = 1; i <= pLen; i++){
            for (int j = 1; j <= sLen; j++){
                if (s.charAt(j-1) == p.charAt(i-1) || p.charAt(i-1) == '?'){
                    dp[i][j] = dp[i-1][j-1];
                } else if (p.charAt(i-1) == '*'){
                    dp[i][j] = dp[i-1][j] | dp[i][j-1];
                }
            }
        }

//        for (int i = 0; i < dp.length; i ++){
//            for(int j = 0; j< dp[0].length; j++)
//            {
//                System.out.print(dp[i][j] + " ");
//            }
//
//            System.out.print("\n");
//        }

        return dp[pLen][sLen];
    }

    public static void main(String[] args){
        String s = "abceb";
        String p = "*a*b";

        CheckIsMatch cim = new CheckIsMatch();
        System.out.println(cim.isMatch(s, p));

    }
}
