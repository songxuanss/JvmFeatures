package com.jitaida.tiancai.leetcode.hard;

import java.util.Map;
import java.util.TreeMap;

/**
 * 给你一个字符串?s?和一个字符规律?p，请你来实现一个支持 '.'?和?'*'?的正则表达式匹配。
 * <p>
 * '.' 匹配任意单个字符
 * '*' 匹配零个或多个前面的那一个元素
 * 所谓匹配，是要涵盖?整个?字符串?s的，而不是部分字符串。
 * <p>
 * 说明:
 * <p>
 * s?可能为空，且只包含从?a-z?的小写字母。
 * p?可能为空，且只包含从?a-z?的小写字母，以及字符?.?和?*。
 * 示例 1:
 * <p>
 * 输入:
 * s = "aa"
 * p = "a"
 * 输出: false
 * 解释: "a" 无法匹配 "aa" 整个字符串。
 * 示例 2:
 * <p>
 * 输入:
 * s = "aa"
 * p = "a*"
 * 输出: true
 * 解释:?因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
 * 示例?3:
 * <p>
 * 输入:
 * s = "ab"
 * p = ".*"
 * 输出: true
 * 解释:?".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
 * 示例 4:
 * <p>
 * 输入:
 * s = "aab"
 * p = "c*a*b"
 * 输出: true
 * 解释:?因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
 * 示例 5:
 * <p>
 * 输入:
 * s = "mississippi"
 * p = "mis*is*p*."
 * 输出: false
 * <p>
 * 链接：https://leetcode-cn.com/problems/regular-expression-matching
 */
public class RegexSolution {
    class Reg {
        // character should be a-z and .
        char character;
        // type should be 1 or *
        char type;

        Reg next;

        Reg(char character, char type) {
            this.character = character;
            this.type = type;
        }

        boolean isAnyAny(){
            return character == '.' && type == '*';
        }

        boolean isAny(){
            return type == '*';
        }
    }

    public boolean isMatch(String s, String p) {
        int regIndex = -1;
        int strIndex = 0;
        boolean isStarted = false;
        Reg reg = null;

        while (strIndex < s.length()) {
            if (!isStarted && reg == null) {
                reg = getNextReg(p, regIndex, new Reg('x','1'));
                regIndex++;
                isStarted = true;
            }

            if (reg == null){
                return false;
            }

            if (isMatch(s.charAt(strIndex), reg)){
                if (!reg.isAny()){
                    reg = getNextReg(p, regIndex, reg);
                    regIndex++;
                }
            } else {
                return false;
            }
            strIndex++;
        }

        return true;
    }

    private Reg getNextReg(String reg, int regIndex, Reg curReg) {
        int nextIndex = -1;
        switch (curReg.type) {
            case '*':
                nextIndex = regIndex + 2;
            case '1':
                nextIndex = regIndex + 1;
        }

        if (nextIndex == -1 || nextIndex >= reg.length()){
            return null;
        }

        Reg retval;

        if (nextIndex + 1 < reg.length() && reg.charAt(nextIndex + 1) == '*'){
            retval = new Reg(reg.charAt(nextIndex), '*');
        } else {
            retval = new Reg(reg.charAt(nextIndex), '1');
        }

        if (curReg.isAnyAny() && retval.isAnyAny()){
            return getNextReg(reg, nextIndex, retval);
        }

        if (retval.isAnyAny()){
            retval.next = getNextReg(reg, nextIndex, retval);
        }

        return retval;
    }

    private boolean isMatch(Character c, Reg reg){
        if (reg.isAnyAny() && isMatch(c, reg.next)){
            return false;
        } else if (reg.isAnyAny() && !isMatch(c, reg.next)){
            return true;
        }

        if(c == reg.character){
            return true;
        }

        if (reg.character == '.'){
            return true;
        }

        return false;
    }

    public static void main(String[] args){
        RegexSolution reg = new RegexSolution();

        System.out.println(reg.isMatch("mississippi","mis*is*p*."));
    }
}
