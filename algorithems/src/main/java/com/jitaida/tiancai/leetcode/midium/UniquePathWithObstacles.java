package com.jitaida.tiancai.leetcode.midium;

/**
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
 *
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
 *
 * 现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
 *
 *
 *
 * 网格中的障碍物和空位置分别用 1 和 0 来表示。
 *
 * 说明：m?和 n 的值均不超过 100。
 *
 * 示例?1:
 *
 * 输入:
 * [
 * ? [0,0,0],
 * ? [0,1,0],
 * ? [0,0,0]
 * ]
 * 输出: 2
 * 解释:
 * 3x3 网格的正中间有一个障碍物。
 * 从左上角到右下角一共有 2 条不同的路径：
 * 1. 向右 -> 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右 -> 向右
 *
 */
public class UniquePathWithObstacles {
    public int uniquePathsWithObstacles(int[][] obstacleGrid){
        return getNumPath(obstacleGrid, 0, 0);
    }

    public int getNumPath(int[][] obstacleGrid, int curx, int cury){
        int xlen = obstacleGrid.length;
        int ylen = obstacleGrid[0].length;
        int ret = 0;

        if (obstacleGrid[curx][cury] == 1){
            return 0;
        }

        if (curx == xlen - 1 && cury == ylen - 1){
            return 1;
        }

        if (cury + 1 < ylen){
            ret += getNumPath(obstacleGrid, curx, cury + 1);
        }

        if (curx + 1 < xlen){
            ret += getNumPath(obstacleGrid, curx + 1, cury);
        }

        return ret;
    }

    public static void main(String[] args){
        int[][] grid = new int[][]{
                {0,0}
        };

        UniquePathWithObstacles x = new UniquePathWithObstacles();
        System.out.println(x.uniquePathsWithObstacles(grid));
    }
}
